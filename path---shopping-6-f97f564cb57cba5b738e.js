webpackJsonp([0xaecc2e3a9d5e],{347:function(e,t){e.exports={data:{markdownRemark:{html:'<h2>Intent</h2>\n<p>Reaching outside of the code for a moment, this step will also consider additional framework surrounding your services in order for them to communicate with each other.</p>\n<h2>Problem</h2>\n<p>This step is to fix up one of the glaring issues of the previous steps and move to an eventually consistent model. The aim will be to utilize queuing and messaging to pass information from one service to the other. Services like AWS\'s SNS and SQS are recommended here. Using a framework such as <a href="https://github.com/localstack/localstack">Localstack</a> you can avoid having to set up your own AWS account. </p>\n<p>In order to construct these events, utilizing DDD (Domain Driven Design) is recommended. </p>\n<p>When an item has its quantity drop to zero, raise an event to a separate services to ‘order more’. The separate service will then notify the api when the items have been ‘delivered’ and the api will record the new quantity.</p>\n<p>Your events should be standardised.</p>\n<p>The separate service should be the one created in the previous step.\nThe new service should communicate back to the original API via an event as well. </p>\n<p><a href="../shopping5">&#x3C; Prev</a></p>',frontmatter:{path:"/shopping6",title:"Shopping Cart 6: Eventing and DDD"}}},pathContext:{}}}});
//# sourceMappingURL=path---shopping-6-f97f564cb57cba5b738e.js.map